export const data = JSON.parse("{\"key\":\"v-1650fb0a\",\"path\":\"/articles/%E6%9C%AA%E6%8E%88%E6%9D%83%E6%BC%8F%E6%B4%9E/Redis%20%E6%9C%AA%E6%8E%88%E6%9D%83.html\",\"title\":\"\",\"lang\":\"zh-CN\",\"frontmatter\":{\"description\":\"⚠️ 声明： 本文仅供学习交流使用，切勿用于非法用途 ⚠️ 🔨 原理介绍 Redis 未授权访问 准确的来说，其实并不是一个漏洞。而是由于开发人员配置不当，而产生的预料之外的危害。 具体原理： 可能由于部分业务要求，或者开发人员的配置不当，将 redis 服务器的 ip 和 port 暴露在公网上； 开发人员未配置 redis 的访问口令（redis 默认是不需要口令的），或者配置了弱口令； 攻击者通过爆破等方式，连接到 redis 终端，获取或者写入 redis 键值对。（有部分开发人员会觉得自己项目 redis 中缓存了一部分不是很重要的公开数据，便没有重视 redis 的配置，也是 redis 未授权访问产生的重要原因之一）； 攻击者利用缓存持久化、反弹 shell、权限维持等技术，直接远控主机进行任意操作（这便是上面提到的预料意外的危害，可能部分开发会觉得仅仅是泄露一些无关紧要的数据而已，而实际上，远不止于此，远控主机之后，一旦进入内网，便可以肆虐整个公司网络环境）。\"},\"headers\":[{\"level\":2,\"title\":\"🔨 原理介绍\",\"slug\":\"原理介绍\",\"link\":\"#原理介绍\",\"children\":[]},{\"level\":2,\"title\":\"🔨 产生前提\",\"slug\":\"产生前提\",\"link\":\"#产生前提\",\"children\":[]},{\"level\":2,\"title\":\"🔨 场景还原（溯源）\",\"slug\":\"场景还原-溯源\",\"link\":\"#场景还原-溯源\",\"children\":[]},{\"level\":2,\"title\":\"🔨 攻击原理分析\",\"slug\":\"攻击原理分析\",\"link\":\"#攻击原理分析\",\"children\":[]},{\"level\":2,\"title\":\"🔨 攻击流程复现\",\"slug\":\"攻击流程复现\",\"link\":\"#攻击流程复现\",\"children\":[{\"level\":3,\"title\":\"1. 远程连接 redis 服务，写入定时任务\",\"slug\":\"_1-远程连接-redis-服务-写入定时任务\",\"link\":\"#_1-远程连接-redis-服务-写入定时任务\",\"children\":[]},{\"level\":3,\"title\":\"2. 动态配置 redis 的持久化路径和文件名，手动持久化，触发定时任务的保存\",\"slug\":\"_2-动态配置-redis-的持久化路径和文件名-手动持久化-触发定时任务的保存\",\"link\":\"#_2-动态配置-redis-的持久化路径和文件名-手动持久化-触发定时任务的保存\",\"children\":[]},{\"level\":3,\"title\":\"3. 等待几分钟之后，进入虚拟机（被攻击机）查看效果\",\"slug\":\"_3-等待几分钟之后-进入虚拟机-被攻击机-查看效果\",\"link\":\"#_3-等待几分钟之后-进入虚拟机-被攻击机-查看效果\",\"children\":[]},{\"level\":3,\"title\":\"4. （进阶）定时任务反弹 shell 获取权限\",\"slug\":\"_4-进阶-定时任务反弹-shell-获取权限\",\"link\":\"#_4-进阶-定时任务反弹-shell-获取权限\",\"children\":[]},{\"level\":3,\"title\":\"5. （进阶）SSH key 免密登录，权限维持\",\"slug\":\"_5-进阶-ssh-key-免密登录-权限维持\",\"link\":\"#_5-进阶-ssh-key-免密登录-权限维持\",\"children\":[]}]},{\"level\":2,\"title\":\"🔨 修复与加固方案\",\"slug\":\"修复与加固方案\",\"link\":\"#修复与加固方案\",\"children\":[{\"level\":3,\"title\":\"问题修复（只针对上述案例，真实场景中更复杂）\",\"slug\":\"问题修复-只针对上述案例-真实场景中更复杂\",\"link\":\"#问题修复-只针对上述案例-真实场景中更复杂\",\"children\":[]},{\"level\":3,\"title\":\"Redis 加固\",\"slug\":\"redis-加固\",\"link\":\"#redis-加固\",\"children\":[]}]}],\"readingTime\":{\"minutes\":12.43,\"words\":3730},\"filePathRelative\":\"articles/未授权漏洞/Redis 未授权.md\",\"excerpt\":\"<blockquote>\\n<p>⚠️ 声明： 本文仅供学习交流使用，切勿用于非法用途 ⚠️</p>\\n</blockquote>\\n<h2> 🔨 原理介绍</h2>\\n<blockquote>\\n<p><strong>Redis 未授权访问</strong> 准确的来说，其实并不是一个漏洞。而是由于开发人员配置不当，而产生的预料之外的危害。\\n<br>\\n具体原理：</p>\\n<ol>\\n<li>可能由于部分业务要求，或者开发人员的配置不当，将 <code>redis</code> 服务器的 <code>ip</code> 和 <code>port</code> 暴露在公网上；</li>\\n<li>开发人员未配置 <code>redis</code> 的访问口令（<code>redis</code> 默认是不需要口令的），或者配置了弱口令；</li>\\n<li>攻击者通过爆破等方式，连接到 <code>redis</code> 终端，获取或者写入 <code>redis</code> 键值对。（<em>有部分开发人员会觉得自己项目 <code>redis</code> 中缓存了一部分不是很重要的公开数据，便没有重视 <code>redis</code> 的配置，也是 <code>redis</code> 未授权访问产生的重要原因之一</em>）；</li>\\n<li>攻击者利用缓存持久化、反弹 shell、权限维持等技术，直接远控主机进行<strong>任意操作</strong>（<em>这便是上面提到的预料意外的危害，可能部分开发会觉得仅仅是泄露一些无关紧要的数据而已，而实际上，远不止于此，远控主机之后，一旦进入内网，便可以肆虐整个公司网络环境</em>）。</li>\\n</ol>\\n</blockquote>\",\"autoDesc\":true}")

if (import.meta.webpackHot) {
  import.meta.webpackHot.accept()
  if (__VUE_HMR_RUNTIME__.updatePageData) {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  }
}

if (import.meta.hot) {
  import.meta.hot.accept(({ data }) => {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  })
}
